{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-741f0f76-43f2-4e05-a509-6d25ee6eb67a.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1658224948833,"exec_count":5,"id":"c25741","input":"DampedVehicleSuspension()._eoms","kernel":"python3","output":{"0":{"ename":"NameError","evalue":"name 'DampedVehicleSuspension' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_10793/2437056586.py\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mDampedVehicleSuspension\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_eoms\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'DampedVehicleSuspension' is not defined"]}},"pos":2,"scrolled":true,"start":1658224948782,"state":"done","type":"cell"}
{"cell_type":"code","end":1658225023348,"exec_count":12,"id":"3067cb","input":"DampedVehicleSuspension().preview()","kernel":"python3","output":{"0":{"ename":"NameError","evalue":"name 'DampedVehicleSuspension' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_10793/2983784020.py\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mDampedVehicleSuspension\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'DampedVehicleSuspension' is not defined"]}},"pos":1,"scrolled":true,"start":1658225023315,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2780f4","input":"class DampedVehicleSuspension(ComposedSystem):\n\n    scheme_name = 'damped_car_new.PNG'\n    real_name = 'car_real.jpg'\n    \n    m=Symbol('m', positive=True)\n    I=Symbol('I', positive=True)\n    l_rod=Symbol('l_{rod}', positive=True)\n    l_l=Symbol('l_l', positive=True)\n    l_r=Symbol('l_r', positive=True)\n                \n    r=Symbol('k_r', positive=True)\n                \n    k_l=Symbol('k_l', positive=True)\n                \n    F_engine=Symbol('F_{engine}', positive=True)\n                \n    ivar=Symbol('t', positive=True)\n                \n    c_l=Symbol('c_l', positive=True)\n    c_r=Symbol('c_r', positive=True)\n                \n    l_cl=Symbol('l_{cl}', positive=True)\n    l_cr=Symbol('l_{cr}', positive=True)\n    l_l=Symbol('l_{l}', positive=True)\n    \n    L=Symbol('L', positive=True)            \n    #qs=dynamicsymbols('z, \\\\varphi')\n    phi=dynamicsymbols('z, \\\\varphi')\n    z=dynamicsymbols('z, \\\\varz')\n\n\n    def __init__(self,\n                 m=None,\n                 I=None,\n                 l_rod=None,\n                 L=None,\n                 l_r=None,\n                 k_r=None,\n                 k_l=None,\n                 F_engine=None,\n                 c_l=None,\n                 c_r=None,\n                 l_cl=None,\n                 l_l=None,\n                 l_cr=None,\n                 theta=None,\n                 phi=None,\n                 z=None,\n                 ivar=Symbol('t'),\n                 qs=None,\n                 \n                 **kwargs):\n  \n        if  m is not None: self.m =m # mass of a rod\n        if  I is not None: self.I = I # moment of inertia of a rod\n        if  l_rod is not None: self.l_rod =l_rod# length of a rod\n        if  l_r is not None: self.l_r = l_r \n        if  l_l is not None: self.l_l = l_l \n        if  k_r is not None: self.k_r =k_r# left spring\n        if  k_l is not None: self.k_l = k_l# right spring\n        if  F_engine is not None: self.F_engine = F_engine\n        if  c_l is not None: self.c_l =c_l\n        if  c_r is not None: self.c_r =  c_r\n        if  theta is not None: self.theta = theta\n        if  L is not None: self.L = L\n        if  phi is not None: self.phi = phi\n        if z is not None: self.z=z    \n          \n            # self.z, self.phi = self.qs\n        self.qs = [self.phi,self.z]\n    \n        self.damper_l = Damper(c_l, pos1=z + phi * l_l,\n                               qs=qs)  # left damper\n        self.damper_r = Damper(c=c_r, pos1=z - phi * l_r,\n                               qs=qs)  # right damper\n        \n        self.body = RigidBody2D(m, I, pos_lin=z, pos_rot=phi, qs=qs)  # rod\n        self.spring_1 = Spring(k_l, pos1=z + phi * l_l, qs=qs)  # left spring\n        self.spring_2 = Spring(k_r, pos1=z - phi * l_r, qs=qs)  # right spring\n        self.force = Force(F_engine, pos1=z - l_r * phi, qs=qs)\n        system = self.body + self.spring_1 + self.spring_2 + self.force + self.damper_l + self.damper_r\n\n        super().__init__(system,**kwargs)\n        \n#    def max_dynamic_force_pin(self):\n#        return self.frequency_response_function()*self.stiffness_matrix()[0]\n    \n#    def dynamic_bearing_force(self):\n       \n#       return self.max_dynamic_force_pin() * self.sqrt(L)\n    \n    \n    \n    def get_default_data(self):\n\n        m0, l0, c0, k_0, l_l0, omega, F_0 = symbols('m_0 l_0 c_0 k_0 l_l0 Omega F_0',\n                                            positive=True)\n\n        default_data_dict = {\n            self.I: [self.m*self.l_rod**2],\n            self.l_rod:[l0,2*l0,3*l0,4*l0,5*l0,6*l0,7*l0,8*l0,9*l0],\n            self.m: [m0,2*m0,3*m0,4*m0,5*m0,6*m0,7*m0,8*m0,9*m0],\n            self.c_r: [2 * c0, 3 * c0, 4 * c0, 5 * c0, 6 * c0],\n            self.k_l: [2 * k_0, 3 * k_0, 4 * k_0, 5 * k_0, 6 * k_0],\n            self.k_r: [2 * k_0, 3 * k_0, 4 * k_0, 5 * k_0, 6 * k_0],\n            \n            \n            self.c_l: [2 * c0, 3 * c0, 4 * c0, 5 * c0, 6 * c0],\n            self.l_r: [0.2*self.l_rod,0.25 * self.l_rod, 0.3 * self.l_rod, 0.4 * self.l_rod, 0.5 * self.l_rod,0.35 * self.l_rod, 0.45 * self.l_rod],\n            self.l_l: [0.2*self.l_rod,0.25 * self.l_rod, 0.3 * self.l_rod, 0.4 * self.l_rod, 0.5 * self.l_rod,0.35 * self.l_rod, 0.45 * self.l_rod],\n\n            self.F_engine: [\n                2 * F_0 * sin(omega * self.ivar),\n                3 * F_0 * sin(omega * self.ivar),\n                4 * F_0 * sin(omega * self.ivar),\n                5 * F_0 * sin(omega * self.ivar),\n                6 * F_0 * sin(omega * self.ivar)\n            ]\n        }\n\n        return default_data_dict","pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"853a05","input":"","pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"e1437f","input":"%load_ext autoreload\n%autoreload 2\n\nimport random\nimport base64\nimport random\nimport IPython as IP\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport copy\nimport sys,importlib\nimport itertools as it\n\nfrom sympy.physics.mechanics import mechanics_printing\n\n# from moodle import *\n# from moodle.questions.mechanics.pl import *\n# from moodle.questions.mechanics.pl import *\nfrom pylatex import Document, Figure, Package, NoEscape\nfrom dynpy.utilities.report import ReportText\n\nfrom dynpy.models.mdof import *\n\nfrom dynpy.models.ddof import *\nfrom dynpy.models.sdof import *\n\nfrom dynpy.utilities.templates.document import *\nfrom dynpy.utilities.components.mechanics import *\nmechanics_printing()\n","kernel":"python3","output":{"0":{"name":"stdout","text":"The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n"}},"pos":0,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"0c64fc","input":"class DampedVehicleSuspension(ComposedSystem):\n\n    scheme_name = 'damped_car_new.PNG'\n    real_name = 'car_real.jpg'\n\n    m=Symbol('m', positive=True)\n    I=Symbol('I', positive=True)\n    l_rod=Symbol('l_{rod}', positive=True)\n    l_l=Symbol('l_l', positive=True)\n    l_r=Symbol('l_r', positive=True)\n\n    k_r=Symbol('k_r', positive=True)\n\n    k_l=Symbol('k_l', positive=True)\n\n    F_engine=Symbol('F_{engine}', positive=True)\n\n    ivar=Symbol('t', positive=True)\n\n    c_l=Symbol('c_l', positive=True)\n    c_r=Symbol('c_r', positive=True)\n    c=Symbol('c', positive=True)\n\n    l_cl=Symbol('l_{cl}', positive=True)\n    l_cr=Symbol('l_{cr}', positive=True)\n    l_l=Symbol('l_{l}', positive=True)\n    lam=Symbol('lam', positive=True)\n    Omega=Symbol('Omega', positive=True)\n    L=Symbol('L', positive=True)            \n\n    phi=dynamicsymbols('\\\\varphi') \n    \n    z=dynamicsymbols('z') \n    \n    z,phi=dynamicsymbols('z, \\\\varphi') \n    \n    \n    #default symbols for substitution\n    m0=Symbol('m_0', positive=True)\n    l0=Symbol('l_0', positive=True)\n    c0=Symbol('c_0', positive=True)\n    k0=Symbol('k_0', positive=True)\n    lam0=Symbol('lam_0', positive=True)\n    Omega0=Symbol('Omega0', positive=True)\n    F0=Symbol('F_0', positive=True)\n    \n    def __init__(self,\n                 m=None,\n                 I=None,\n                 l_rod=None,\n                 L=None,\n                 l_r=None,\n                 k_r=None,\n                 k_l=None,\n                 F_engine=None,\n                 c_l=None,\n                 c_r=None,\n                 c=None,\n                 l_cl=None,\n                 l_l=None,\n                 l_cr=None,\n                 theta=None,\n                 phi=None,\n                 z=None,\n                 Omega=None,\n                 ivar=Symbol('t'),\n                 qs=None,\n                 lam=None,\n\n                 **kwargs):\n\n        if  m is not None: self.m =m\n        if  I is not None: self.I = I\n        if  l_rod is not None: self.l_rod =l_rod\n        if  l_r is not None: self.l_r = l_r \n        if  l_l is not None: self.l_l = l_l \n        if  k_r is not None: self.k_r =k_r\n        if  k_l is not None: self.k_l = k_l\n        if  F_engine is not None: self.F_engine = F_engine\n        if  c_l is not None: self.c_l =c_l\n        if  c_r is not None: self.c_r =  c_r\n        if  c is not None: self.c =  c\n        if  theta is not None: self.theta = theta\n        if  L is not None: self.L = L\n        if  phi is not None: self.phi = phi\n        if z is not None: self.z=z\n        if lam is not None: self.lam=lam\n        if Omega is not None: self.Omega=Omega\n            # self.z, self.phi = self.qs\n        self.qs = [self.phi,self.z]\n\n        self._init_from_components(**kwargs)\n    @property\n    def components(self):\n\n        components = {}\n\n        self._damper_l = Damper(c=self.c_l, pos1=self.z + self.phi * self.l_l, qs=self.qs)(label='left damper')\n        self._damper_r = Damper(c=self.c_r, pos1=self.z - self.phi * self.l_r, qs=self.qs)(label='right damper')\n\n        self._body = RigidBody2D(self.m, self.I, pos_lin=self.z, pos_rot=self.phi, qs=self.qs)(label='rod')\n\n        self._spring_1 = Spring(self.k_l, pos1=self.z + self.phi * self.l_l, qs=self.qs)(label='left spring')\n        self._spring_2 = Spring(self.k_r, pos1=self.z - self.phi * self.l_r, qs=self.qs)(label='ight spring')\n\n        self._force = Force(self.F_engine, pos1=self.z - self.l_r * self.phi, qs=self.qs)(label='External force')\n\n        components['_ damper_l'] =  self._damper_l\n        components['_damper_r'] = self._damper_r\n        components['_body'] = self._body\n        components['_spring_1'] = self._spring_1\n        components[' _spring_2'] = self._spring_2\n        components['_force'] = self._force\n\n        return components\n\n    def symbols_description(self):\n        self.sym_desc_dict = {\n    self.m: r'mass of a rod',\n    self.I:r'moment of inertia of a rod',\n    self.l_rod:r'length of a rod',\n    self.l_l:r'length of a left spring',\n    self.l_r:r'length of a right spring',\n    self.k_r:r'right spring',\n    self.k_l:r'left spring',\n    self.F_engine:\n    self.c_l:r'left damper',\n    self.c_r:r'right damper',\n    self.c:\n\n    self.l_cl:\n    self.l_cr:\n    self.l_l:\n    self.lam:\n    self.Omega:r'Excitation frequency',\n    self.L:\n        }\n\n        return self.sym_desc_dict\n\n    def max_dynamic_force_pin(self):\n        return self.frequency_response_function()*self.stiffness_matrix()[0]\n            \n    def dynamic_bearing_force(self):\n        L=Symbol('L')\n        return self.max_dynamic_force_pin() * self.sqrt(L)\n    \n    \n    \n    def get_default_data(self):\n\n        #m0, l0, c0, k_0, l_l0, omega, F_0 = symbols('m_0 l_0 c_0 k_0 l_l0 Omega F_0', positive=True)\n        c0, k_0, l_l0, omega, F_0 = symbols('c_0 k_0 l_l0 Omega F_0', positive=True)\n        m0, l0  = self.m0,self.l0\n        c0, k0= self.c0,self.k0\n        lam0=self.lam0\n        Omega0=self.Omega0\n        F0=self.F0\n\n        default_data_dict = {\n            self.l_rod:[l0*S.One*no for no in range(1, 8)],\n            self.I: [S.One/12*self.m *self.l_rod],\n            self.l_rod:[l0*S.One*no for no in range(1, 8)],\n            #self.m: [m0,2*m0,3*m0,4*m0,5*m0,6*m0,7*m0,8*m0,9*m0],\n            self.m: [m0*S.One*no for no in range(1,8)],\n            #self.c_r: [2 * c0, 3 * c0, 4 * c0, 5 * c0, 6 * c0],\n            self.c_r: [self.lam*(self.k_r)],\n            #self.k: [k0*S.One*no for no in range(1,8)],\n            self.lam: [lam0/10*S.One*no for no in range(1,8)],\n            self.k_l: [k0*S.One*no for no in range(1,8)],\n            self.k_r: [k0*S.One*no for no in range(1,8)],\n            \n            \n            self.c_l: [self.lam*(self.k_l)],\n            self.l_r: [l0*S.One*no for no in range(1, 8)],\n            self.l_l: [l0*S.One*no for no in range(1, 8)],\n           \n            self.Omega: [Omega0*S.One*no for no in range(1,2)],\n            self.F_engine: [F0*sin(self.Omega*self.ivar)*S.One*no for no in range(1,8)],\n            \n          #  self.F_engine: [\n           #     2 * F_0 * sin(omega * self.ivar),\n            #    3 * F_0 * sin(omega * self.ivar),\n             #   4 * F_0 * sin(omega * self.ivar),\n              #  5 * F_0 * sin(omega * self.ivar),\n                #6 * F_0 * sin(omega * self.ivar)\n          #  ]\n        }\n\n        return default_data_dict\n\n","kernel":"python3","output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (1102654594.py, line 123)","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_10793/1102654594.py\"\u001b[0;36m, line \u001b[0;32m123\u001b[0m\n\u001b[0;31m    self.l_r:\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":79,"id":"4a52a1","input":"DampedVehicleSuspension().from_random_data().max_dynamic_force_pin()","output":{"0":{"name":"stdout","output_type":"stream","text":"init - check\n"},"1":{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAA4AAAAMCAYAAABSgIzaAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA6UlEQVQoFZWS0Q3CMAxE24oBYIXOAhsAI8AG9Ld/iBEoEyB1AzoCYgNGAHWD8C7YVfpThCXrnPNd4qTNQwhZGnVdn1i/jOvBO9wj1aieOUGzpL6RFXUrHjwDG3KldRqDEVKm1k0m2oJH1fBz4EKuqfNopNDOOjGKwBjwi6TuWV9ZS5cV1tDOHQ3daSo0cidBgVgjKDXqr1giiDoZ/RTHkZm+xJkdUILfE03VgHq9USDSp3kbqQ2Gz5L7dzSRNE8TavwGPk4C6gH1QJX6g1GLqcCgDfekfojeX3XK4z2/307EP0aNfcAT7/kBPTlWTd8IJrwAAAAASUVORK5CYII=","text/latex":"$\\displaystyle c_{l}$","text/plain":"cₗ"},"execution_count":79,"metadata":{},"output_type":"execute_result"},"2":{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAAoAAAAJCAYAAAALpr0TAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAsUlEQVQYGV2QwQ3CMAxFW8QAEWyQEViBsgERE0A3QOKU3BArwASIERArdARmYIPwfsAlwtKr7W87qdPmnBuzlNKC+PbNA/kAnrxrrRHBITzgCnPQ0ACeWpgSmM0IlogvE4hPxFvl44lWlKdBpx/gOA7q6poYo4d9rZXfqwUaOtj9aU75RFfJuGKNc/hzEX6fi8KyDEVt2IOeQ/4O2lzDAT6N+A0NKwl4FXXKE3pyPVHzBoWcaLRHjf1+AAAAAElFTkSuQmCC","text/latex":"$\\displaystyle z$","text/plain":"z"},"execution_count":79,"metadata":{},"output_type":"execute_result"},"3":{"name":"stdout","output_type":"stream","text":"init - check\n"},"4":{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAA4AAAAMCAYAAABSgIzaAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA6UlEQVQoFZWS0Q3CMAxE24oBYIXOAhsAI8AG9Ld/iBEoEyB1AzoCYgNGAHWD8C7YVfpThCXrnPNd4qTNQwhZGnVdn1i/jOvBO9wj1aieOUGzpL6RFXUrHjwDG3KldRqDEVKm1k0m2oJH1fBz4EKuqfNopNDOOjGKwBjwi6TuWV9ZS5cV1tDOHQ3daSo0cidBgVgjKDXqr1giiDoZ/RTHkZm+xJkdUILfE03VgHq9USDSp3kbqQ2Gz5L7dzSRNE8TavwGPk4C6gH1QJX6g1GLqcCgDfekfojeX3XK4z2/307EP0aNfcAT7/kBPTlWTd8IJrwAAAAASUVORK5CYII=","text/latex":"$\\displaystyle c_{l}$","text/plain":"cₗ"},"execution_count":79,"metadata":{},"output_type":"execute_result"},"5":{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAAoAAAAJCAYAAAALpr0TAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAsUlEQVQYGV2QwQ3CMAxFW8QAEWyQEViBsgERE0A3QOKU3BArwASIERArdARmYIPwfsAlwtKr7W87qdPmnBuzlNKC+PbNA/kAnrxrrRHBITzgCnPQ0ACeWpgSmM0IlogvE4hPxFvl44lWlKdBpx/gOA7q6poYo4d9rZXfqwUaOtj9aU75RFfJuGKNc/hzEX6fi8KyDEVt2IOeQ/4O2lzDAT6N+A0NKwl4FXXKE3pyPVHzBoWcaLRHjf1+AAAAAElFTkSuQmCC","text/latex":"$\\displaystyle z$","text/plain":"z"},"execution_count":79,"metadata":{},"output_type":"execute_result"},"6":{"name":"stdout","output_type":"stream","text":"init - check\n"},"7":{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAA4AAAAMCAYAAABSgIzaAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA6UlEQVQoFZWS0Q3CMAxE24oBYIXOAhsAI8AG9Ld/iBEoEyB1AzoCYgNGAHWD8C7YVfpThCXrnPNd4qTNQwhZGnVdn1i/jOvBO9wj1aieOUGzpL6RFXUrHjwDG3KldRqDEVKm1k0m2oJH1fBz4EKuqfNopNDOOjGKwBjwi6TuWV9ZS5cV1tDOHQ3daSo0cidBgVgjKDXqr1giiDoZ/RTHkZm+xJkdUILfE03VgHq9USDSp3kbqQ2Gz5L7dzSRNE8TavwGPk4C6gH1QJX6g1GLqcCgDfekfojeX3XK4z2/307EP0aNfcAT7/kBPTlWTd8IJrwAAAAASUVORK5CYII=","text/latex":"$\\displaystyle c_{l}$","text/plain":"cₗ"},"execution_count":79,"metadata":{},"output_type":"execute_result"},"8":{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAAoAAAAJCAYAAAALpr0TAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAsUlEQVQYGV2QwQ3CMAxFW8QAEWyQEViBsgERE0A3QOKU3BArwASIERArdARmYIPwfsAlwtKr7W87qdPmnBuzlNKC+PbNA/kAnrxrrRHBITzgCnPQ0ACeWpgSmM0IlogvE4hPxFvl44lWlKdBpx/gOA7q6poYo4d9rZXfqwUaOtj9aU75RFfJuGKNc/hzEX6fi8KyDEVt2IOeQ/4O2lzDAT6N+A0NKwl4FXXKE3pyPVHzBoWcaLRHjf1+AAAAAElFTkSuQmCC","text/latex":"$\\displaystyle z$","text/plain":"z"},"execution_count":79,"metadata":{},"output_type":"execute_result"},"9":{"data":{"image/png":"","text/latex":"$\\displaystyle 44 k_{0} l_{0}^{2} \\sqrt{\\left(- \\frac{10 F_{0} l_{0} \\left(- 16 i \\Omega k_{0} lam_{0} - 32 k_{0}\\right)}{25 \\Omega^{4} m_{0}^{2} - 440 i \\Omega^{3} k_{0} l_{0} lam_{0} m_{0} - 15 i \\Omega^{3} k_{0} lam_{0} m_{0} - 200 \\Omega^{2} k_{0}^{2} l_{0} lam_{0}^{2} - 880 \\Omega^{2} k_{0} l_{0} m_{0} - 30 \\Omega^{2} k_{0} m_{0} + 800 i \\Omega k_{0}^{2} l_{0} lam_{0} + 800 k_{0}^{2} l_{0}} + \\frac{5 F_{0} \\left(- 5 \\Omega^{2} m_{0} + 88 i \\Omega k_{0} l_{0} lam_{0} + 176 k_{0} l_{0}\\right)}{25 \\Omega^{4} m_{0}^{2} - 440 i \\Omega^{3} k_{0} l_{0} lam_{0} m_{0} - 15 i \\Omega^{3} k_{0} lam_{0} m_{0} - 200 \\Omega^{2} k_{0}^{2} l_{0} lam_{0}^{2} - 880 \\Omega^{2} k_{0} l_{0} m_{0} - 30 \\Omega^{2} k_{0} m_{0} + 800 i \\Omega k_{0}^{2} l_{0} lam_{0} + 800 k_{0}^{2} l_{0}}\\right)^{2} + \\left(- \\frac{10 F_{0} l_{0} \\left(- 20 \\Omega^{2} m_{0} + 12 i \\Omega k_{0} lam_{0} + 24 k_{0}\\right)}{25 \\Omega^{4} l_{0} m_{0}^{2} - 440 i \\Omega^{3} k_{0} l_{0}^{2} lam_{0} m_{0} - 15 i \\Omega^{3} k_{0} l_{0} lam_{0} m_{0} - 200 \\Omega^{2} k_{0}^{2} l_{0}^{2} lam_{0}^{2} - 880 \\Omega^{2} k_{0} l_{0}^{2} m_{0} - 30 \\Omega^{2} k_{0} l_{0} m_{0} + 800 i \\Omega k_{0}^{2} l_{0}^{2} lam_{0} + 800 k_{0}^{2} l_{0}^{2}} + \\frac{5 F_{0} \\left(- 16 i \\Omega k_{0} lam_{0} - 32 k_{0}\\right)}{25 \\Omega^{4} m_{0}^{2} - 440 i \\Omega^{3} k_{0} l_{0} lam_{0} m_{0} - 15 i \\Omega^{3} k_{0} lam_{0} m_{0} - 200 \\Omega^{2} k_{0}^{2} l_{0} lam_{0}^{2} - 880 \\Omega^{2} k_{0} l_{0} m_{0} - 30 \\Omega^{2} k_{0} m_{0} + 800 i \\Omega k_{0}^{2} l_{0} lam_{0} + 800 k_{0}^{2} l_{0}}\\right)^{2}}$","text/plain":"                 _____________________________________________________________\n                ╱                                                             \n               ╱  ⎛                                                           \n        2     ╱   ⎜                                                         10\n44⋅k₀⋅l₀ ⋅   ╱    ⎜- ─────────────────────────────────────────────────────────\n            ╱     ⎜      4   2          3                       3             \n          ╲╱      ⎝  25⋅Ω ⋅m₀  - 440⋅ⅈ⋅Ω ⋅k₀⋅l₀⋅lam₀⋅m₀ - 15⋅ⅈ⋅Ω ⋅k₀⋅lam₀⋅m₀ -\n\n______________________________________________________________________________\n                                                                              \n                                                                              \n⋅F₀⋅l₀⋅(-16⋅ⅈ⋅Ω⋅k₀⋅lam₀ - 32⋅k₀)                                              \n──────────────────────────────────────────────────────────────────────────────\n      2   2        2        2                2                   2            \n 200⋅Ω ⋅k₀ ⋅l₀⋅lam₀  - 880⋅Ω ⋅k₀⋅l₀⋅m₀ - 30⋅Ω ⋅k₀⋅m₀ + 800⋅ⅈ⋅Ω⋅k₀ ⋅l₀⋅lam₀ + 8\n\n______________________________________________________________________________\n                                                                              \n                                                                 ⎛     2      \n                                                            5⋅F₀⋅⎝- 5⋅Ω ⋅m₀ + \n───────── + ──────────────────────────────────────────────────────────────────\n     2          4   2          3                       3                   2  \n00⋅k₀ ⋅l₀   25⋅Ω ⋅m₀  - 440⋅ⅈ⋅Ω ⋅k₀⋅l₀⋅lam₀⋅m₀ - 15⋅ⅈ⋅Ω ⋅k₀⋅lam₀⋅m₀ - 200⋅Ω ⋅k\n\n______________________________________________________________________________\n                                                                              \n                             ⎞                                                \n88⋅ⅈ⋅Ω⋅k₀⋅l₀⋅lam₀ + 176⋅k₀⋅l₀⎠                                                \n──────────────────────────────────────────────────────────────────────────────\n 2        2        2                2                   2                 2   \n₀ ⋅l₀⋅lam₀  - 880⋅Ω ⋅k₀⋅l₀⋅m₀ - 30⋅Ω ⋅k₀⋅m₀ + 800⋅ⅈ⋅Ω⋅k₀ ⋅l₀⋅lam₀ + 800⋅k₀ ⋅l₀\n\n______________________________________________________________________________\n 2                                                                            \n⎞    ⎛                                                                   ⎛    \n⎟    ⎜                                                          10⋅F₀⋅l₀⋅⎝- 20\n⎟  + ⎜- ──────────────────────────────────────────────────────────────────────\n⎟    ⎜      4      2          3      2                 3                      \n⎠    ⎝  25⋅Ω ⋅l₀⋅m₀  - 440⋅ⅈ⋅Ω ⋅k₀⋅l₀ ⋅lam₀⋅m₀ - 15⋅ⅈ⋅Ω ⋅k₀⋅l₀⋅lam₀⋅m₀ - 200⋅Ω\n\n______________________________________________________________________________\n                                                                              \n  2                            ⎞                                              \n⋅Ω ⋅m₀ + 12⋅ⅈ⋅Ω⋅k₀⋅lam₀ + 24⋅k₀⎠                                              \n──────────────────────────────────────────────────────────────────────────────\n2   2   2     2        2      2          2                      2   2         \n ⋅k₀ ⋅l₀ ⋅lam₀  - 880⋅Ω ⋅k₀⋅l₀ ⋅m₀ - 30⋅Ω ⋅k₀⋅l₀⋅m₀ + 800⋅ⅈ⋅Ω⋅k₀ ⋅l₀ ⋅lam₀ + 8\n\n______________________________________________________________________________\n                                                                              \n                                                                              \n                                                                      5⋅F₀⋅(-1\n────────── + ─────────────────────────────────────────────────────────────────\n     2   2       4   2          3                       3                   2 \n00⋅k₀ ⋅l₀    25⋅Ω ⋅m₀  - 440⋅ⅈ⋅Ω ⋅k₀⋅l₀⋅lam₀⋅m₀ - 15⋅ⅈ⋅Ω ⋅k₀⋅lam₀⋅m₀ - 200⋅Ω ⋅\n\n______________________________________________________________________________\n                                                                              \n                                                                              \n6⋅ⅈ⋅Ω⋅k₀⋅lam₀ - 32⋅k₀)                                                        \n──────────────────────────────────────────────────────────────────────────────\n  2        2        2                2                   2                 2  \nk₀ ⋅l₀⋅lam₀  - 880⋅Ω ⋅k₀⋅l₀⋅m₀ - 30⋅Ω ⋅k₀⋅m₀ + 800⋅ⅈ⋅Ω⋅k₀ ⋅l₀⋅lam₀ + 800⋅k₀ ⋅l\n\n____\n  2 \n ⎞  \n ⎟  \n─⎟  \n ⎟  \n₀⎠  "},"execution_count":79,"metadata":{},"output_type":"execute_result"}},"pos":4,"state":"done","type":"cell"}
{"id":0,"time":1658225639309,"type":"user"}
{"last_load":1658223601449,"type":"file"}