{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-be3d59bb-8580-41db-ad95-79873472fefd.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"end":1638973188381,"exec_count":4,"id":"66283c","input":"from sympy import (Symbol, symbols, Matrix, sin, cos, asin, diff, sqrt, S, diag, Eq,\n                   hessian, Function, flatten, Tuple, im, pi, latex, dsolve,\n                   solve, fraction, factorial,Subs, Number, oo, Abs)\n\nfrom sympy.physics.mechanics import dynamicsymbols, ReferenceFrame, Point\nfrom sympy.physics.vector import vpprint, vlatex\nfrom ..dynamics import LagrangesDynamicSystem, HarmonicOscillator\n\nfrom .elements import MaterialPoint, Spring, GravitationalForce, Disk, RigidBody2D, Damper, PID, Excitation, Force, base_frame,base_origin\nfrom ..continuous import ContinuousSystem, PlaneStressProblem\n\nimport base64\nimport random\nimport IPython as IP\nimport numpy as np\n","kernel":"python3","output":{"0":{"ename":"ImportError","evalue":"attempted relative import with no known parent package","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_11709/1702882915.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msympy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mphysics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmechanics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdynamicsymbols\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mReferenceFrame\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mPoint\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msympy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mphysics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvector\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mvpprint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvlatex\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdynamics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mLagrangesDynamicSystem\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mHarmonicOscillator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0melements\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mMaterialPoint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSpring\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mGravitationalForce\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDisk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRigidBody2D\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDamper\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mPID\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mExcitation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mForce\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbase_frame\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbase_origin\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: attempted relative import with no known parent package"]}},"pos":0,"scrolled":true,"start":1638973187022,"state":"done","type":"cell"}
{"end":1638973221069,"exec_count":6,"id":"ee1546","input":"def __init__(self,\n                 m=Symbol('m', positive=True),\n                 I=Symbol('I', positive=True),\n                 l_rod=Symbol('l_rod', positive=True),\n                 l_l=Symbol('l_l', positive=True),\n                 l_r=Symbol('l_r', positive=True),\n                 k_2=Symbol('k_2', positive=True),\n                 k_1=Symbol('k_1', positive=True),\n                 F_engine=Symbol('F_{engine}', positive=True),\n                 ivar=Symbol('t', positive=True),\n                 qs=dynamicsymbols('z, \\\\varphi'),\n                 **kwargs):\n\n        z, phi = qs\n\n        self.m = m  # mass of a rod\n        self.l_l = l_l  # offset of left spring\n        self.l_r = l_r  # offset of right spring\n        self.l_rod = l_rod  # length of a rod\n        self.k_2 = k_2  # left spring\n        self.k_1 = k_1  # right spring\n        self.I = I  # moment of inertia of a rod\n        self.F_engine = F_engine\n\n        self.body = RigidBody2D(m, (m / 12) * (2 * l_rod)**2,\n                                pos_lin=z,\n                                pos_rot=phi,\n                                qs=qs)\n        self.spring_1 = Spring(k_1, pos1=z + phi * l_l, qs=qs)  # left spring\n        self.spring_2 = Spring(k_2, pos1=z - phi * l_r, qs=qs)  # right spring\n        self.force = Force(F_engine, pos1=z - phi * l_r, qs=qs)\n        system = self.body + self.spring_1 + self.spring_2 + self.force\n\n        super().__init__(system,**kwargs)\n","kernel":"python3","pos":1,"start":1638973221064,"state":"done","type":"cell"}
{"id":"171b96","input":"","pos":2,"type":"cell"}
{"id":0,"time":1640385602783,"type":"user"}
{"last_load":1638972893279,"type":"file"}