from .report import Markdown
from .documents.document import ODESystemOverviewReport
from github import Github
import getpass
from github import Auth
import pint
import inspect
from dynpy.utilities.documents import document
from dynpy.utilities.templates.document import Guide

issue_no = 567
title = 'implementation of overview report for `ODESystem` child classes'
guide_class = ODESystemOverviewReport

meet_issue_code_str = """The following actions are to do, in order to prepare the meeting and the guide:

- [{tic}] #{issue_no+1}

- [{tic}] #{issue_no+2}

- [{tic}] #{issue_no+3}

"""


meet_time_issue_code_str = """The goal is to schedule the meeting in Teams calendar on {date} at {time}.

"""

meet_arrange_issue_code_str ="""The goal is to arrange and execute the meeting for {title}. The following things should be prepared:

- [{tic}] scope and schedule of meeting (in one week);

- [{tic}] conducting team (in two weeks);

- [{tic}] guide or instructions with examples (one week before meeting);

- [{tic}] announcement (in Slack and Teams channel) with basic information (conducting persons, date,scope,schedule) (one week before meeting);

- [{tic}] exemplary code in Jupyter (link) (one week before meeting).

"""


meet_guide_issue_code_str ="""The goal is to prepare or improve a guide or report that is generated by the following code:

```python
from {guide_class_module} import {guide_class_name}
{guide_class_name}()
```

"""

class MeetingIssueCreator:
    _title = 'implementation of ODESystem overview report'
    _issue_no = 567
    _guide = ODESystemOverviewReport
    _time = '20:30'
    _date = '2024.07.27'
    
    def __init__(self,title=None,no=None,guide=None,date=None,time=None,done=False,*args,**kwargs):
        if title is not None: self._title = title
        if no is not None: self._issue_no = no
        if guide is not None: self._guide = guide
        if date is not None: self._date= date
        if time is not None: self._time = time
        self._done = done
        
    
    def _get_elems_dict(self):

        if self._done: tic = 'x'
        else: tic = ' '

        guide_class = self._guide

        elems_dict = {
                'title':self._title,
                'issue_no':self._issue_no,
                'issue_no+1':self._issue_no+1,
                'issue_no+2':self._issue_no+2,
                'issue_no+3':self._issue_no+3,
                'guide_class_module':guide_class.__module__,
                'guide_class_name':guide_class.__name__,
                'date':self._date,
                'time':self._time,
                'tic':tic
                }
        
        return elems_dict
    
    def get_issues_titles(self):
        
        
        # Issue no. #{issue_no}
        ## Preparation of meeting and guide for {title}

        issue_no = self._issue_no
        title = self._title

        titles_dict =   {
                        'meet':f'Preparation of meeting and guide for {title}',
                        'time':f'Scope and time scheduling of the meeting for {title} (issue #{issue_no} related)',
                        'arrange':f'Arrangement and execution of the meeting for {title} (issue #{issue_no} related)',
                        'guide':f'Preparation or improvement of the guide for {title} (issue #{issue_no} related)',
                        }
        
        return titles_dict
        
    def get_issue_str(self):
        elems_dict = self._get_elems_dict()
        issue_no = self._issue_no
        
        titles = self.get_issues_titles()
        
        meet_issue_dict = self.get_meet_issue_dict()
        time_issue_dict = self.get_time_issue_dict()
        arrange_issue_dict = self.get_arrange_issue_dict()
        guide_issue_dict = self.get_guide_issue_dict()
        
        
        issue_code_str = (f'# Issue no. #{issue_no} \n '+
                        '## '+meet_issue_dict['title'] + '\n ' +
                        meet_issue_dict['body'] + '\n ' +
                        f'# Issue no. #{issue_no+1} \n '+
                        '## '+ time_issue_dict['title'] + '\n ' +
                        time_issue_dict['body'] + '\n ' +
                        f'# Issue no. #{issue_no+2} \n '+
                        '## '+arrange_issue_dict['title'] + '\n ' +
                        arrange_issue_dict['body'] + '\n ' +
                        f'# Issue no. #{issue_no+3} \n ' +
                        '## '+guide_issue_dict['title'] + '\n ' +
                        guide_issue_dict['body'])
        
        return issue_code_str


    def get_meet_issue_dict(self):
        elems_dict = self._get_elems_dict()
        titles = self.get_issues_titles()
                
        return {'title':titles['meet'],'body':meet_issue_code_str.format(**elems_dict)}

    def get_time_issue_dict(self):
        elems_dict = self._get_elems_dict()
        titles = self.get_issues_titles()
                
        return {'title':titles['time'],'body':meet_time_issue_code_str.format(**elems_dict)}


    def get_arrange_issue_dict(self):
        elems_dict = self._get_elems_dict()
        titles = self.get_issues_titles()
                
        return {'title':titles['arrange'],'body':meet_arrange_issue_code_str.format(**elems_dict)}
    
    
    def get_guide_issue_dict(self):
        elems_dict = self._get_elems_dict()
        titles = self.get_issues_titles()
                
        return {'title':titles['guide'],'body':meet_guide_issue_code_str.format(**elems_dict)}

    
    def _repr_markdown_(self):
        return self.get_issue_str()

    def publish_on_github(self,repository):
        
        guide_label=repository.get_label('guidance')
        
        issue_meet=repository.create_issue(**self.get_meet_issue_dict(),labels=[guide_label]#,assignees=wykon
                                )
        issue_time=repository.create_issue(**self.get_time_issue_dict(),labels=[guide_label],assignee='bogumilchilinski')
        issue_arrange=repository.create_issue(**self.get_arrange_issue_dict(),labels=[guide_label]#,assignees=wykon
                                )
        issue_guide=repository.create_issue(**self.get_guide_issue_dict(),labels=[guide_label]#,assignees=wykon
                                )
        
        return issue_meet,issue_time,issue_arrange,issue_guide

class GitHubInterface():

    def __init__(self):

        pass_code = getpass.getpass('Github token')
        auth = Auth.Token(pass_code)
        g = Github(auth=auth)
        self.g = g

    def open(self):

        if self.g is None:
            pass_code = getpass.getpass('Github token')
            auth = Auth.Token(pass_code)
            g = Github(auth=auth)
            self.g = g
        else:
            pass

    def get_repos_list(self, string=False):

        if string == False:
            return list(self.g.get_user().get_repos())
        else:
            repo_list=[]
            for repo in list(self.g.get_user().get_repos()):
                repo_list.append(repo.full_name)
            return repo_list

    def get_repo(self, full_name='bogumilchilinski/dynpy'):

        return self.g.get_repo(full_name)


    def get_issues_list(self, repo_name='none', state='all', assignee='none'):#, milestone='none',  labels='none', sort='none', direction='none', creator='none'):

        issue_list=[]
        for issue in list(self.g.get_repo(repo_name).get_issues(state=state, assignee=assignee)):#, milestone=milestone,  labels=labels, sort=sort, direction=direction, creator=creator)):
            issue_list.append(issue)
        return issue_list

    
    
    def as_df(self):

        import pandas as pd

        issue_title_list=[]
        issue_number_list=[]
        issue_assignees_list=[]
        for issue in self.get_issues_list(repo_name='bogumilchilinski/dynpy', state='open', assignee='amvdek'):
            issue_title_list.append(issue.title)
            issue_number_list.append(issue.number)
#             issue_assignees_list.append(issue.assignees)

        data_dict = {'Issue title':issue_title_list, 'Issue number':issue_number_list, }#'Assignees':issue_assignees_list}

        return pd.DataFrame(data_dict)



    def open_issues(self, state='open', since=None, sort=None):

        if self.g is not None:
            dp_repo=list(self.g.get_user().get_repos())[1]
            (dp_repo).full_name

            repo = self.g.get_repo(dp_repo.full_name)
            open_issues = repo.get_issues(state=state, since=since, sort=sort)
            for issue in open_issues:
                if 'class that creates a part of a report' in issue.title:
                    print(issue.title.split('`')[1])

            [issue.title.split('`')[1] for issue in open_issues if 'class that creates a part of a report' in issue.title ]

        else:
            return 'Reopen the client'


    def close(self):

        if self.g is not None:
            g = self.g
            self.g = g.close()
        else:
            pass
def list_of_guides():
    md_str='Lista poradnik√≥w: \n\n'
    for name, obj in inspect.getmembers(document):
        if inspect.isclass(obj) and 'Guide' in name:
                if obj is not Guide:
                    md_str=md_str+f'\t\t - {name} \n\n'
    return md_str