from .report import Markdown
from .documents.document import ODESystemOverviewReport

issue_no = 567
title = 'implementation of ODESystem overview report'
guide_class = ODESystemOverviewReport

meet_issue_code_str = """
The following actions are to do, in order to prepare the meeting and the guide:

- [{tic}] #{issue_no+1}

- [{tic}] #{issue_no+2}

- [{tic}] #{issue_no+3}

"""


meet_time_issue_code_str = """
The goal is to schedule the meeting in Teams calendar on {date} at {time}.

"""

meet_arrange_issue_code_str ="""
The goal is to arrange and execute the meeting for {title}. The following things should be prepared:

- [{tic}] scope and schedule of meeting (in one week);

- [{tic}] conducting team (in two weeks);

- [{tic}] guide or instructions with examples (one week before meeting);

- [{tic}] announcement (in Slack and Teams channel) with basic information (conducting persons, date,scope,schedule) (one week before meeting);

- [{tic}] exemplary code in Jupyter (link) (one week before meeting).

"""


meet_guide_issue_code_str ="""
The goal is to prepare or improve a guide or report that is generated by the following code:

```
from {guide_class_module} import {guide_class_name}
{guide_class_name}();
```

"""

class MeetingIssueCreator:
    _title = 'implementation of ODESystem overview report'
    _issue_no = 567
    _guide = ODESystemOverviewReport
    _time = '20:30'
    _date = '2024.07.27'
    
    def __init__(self,title=None,no=None,guide=None,date=None,time=None,done=False,*args,**kwargs):
        if title is not None: self._title = title
        if no is not None: self._issue_no = no
        if guide is not None: self._guide = guide
        if date is not None: self._date= date
        if time is not None: self._time = time
        self._done = done
        
    
    def _get_elems_dict(self):

        if self._done: tic = 'x'
        else: tic = ' '

        elems_dict = {
                'title':self._title,
                'issue_no':self._issue_no,
                'issue_no+1':self._issue_no+1,
                'issue_no+2':self._issue_no+2,
                'issue_no+3':self._issue_no+3,
                'guide_class_module':guide_class.__module__,
                'guide_class_name':guide_class.__name__,
                'date':self._date,
                'time':self._time,
                'tic':tic
                }
        
        return elems_dict
    
    def get_issues_titles(self):
        
        
        # Issue no. #{issue_no}
        ## Preparation of meeting and guide for {title}

        issue_no = self._issue_no
        title = self._title

        titles_dict =   {
                        'meet':f'Preparation of meeting and guide for {title}',
                        'time':f'Scope and time scheduling of the meeting for {title} (issue #{issue_no} related)',
                        'arrange':f'Arrangement and execution of the meeting for {title} (issue #{issue_no} related)',
                        'guide':f'Preparation or improvement of the guide for {title} (issue #{issue_no} related)',
                        }
        
        return titles_dict
        
    def get_issue_str(self):
        elems_dict = self._get_elems_dict()
        issue_no = self._issue_no
        
        titles = self.get_issues_titles()
        
        issue_code_str = (f'# Issue no. #{issue_no} \n '+
                        '## '+titles['meet'] + '\n ' +
                        meet_issue_code_str + 
                        f'# Issue no. #{issue_no+1} \n '+
                        '## '+titles['time'] + '\n ' +
                        meet_time_issue_code_str + 
                        f'# Issue no. #{issue_no+2} \n '+
                        '## '+titles['arrange'] + '\n ' +
                        meet_arrange_issue_code_str + 
                        f'# Issue no. #{issue_no+3} \n ' +
                        '## '+titles['guide'] + '\n ' +
                        meet_guide_issue_code_str)
        
        return issue_code_str.format(**elems_dict)
    
    def _repr_markdown_(self):
        return self.get_issue_str()