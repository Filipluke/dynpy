from .report import Markdown
from .documents.document import ODESystemOverviewReport

issue_no = 567
title = 'implementation of ODESystem overview report'
guide_class = ODESystemOverviewReport

meet_issue_code_str = """
# Issue no. #{issue_no}
## Preparation of meeting and guide for {title}

The following actions are to do, in order to prepare the meeting and the guide:

- [ ] #{issue_no+1}

- [ ] #{issue_no+2}

- [ ] #{issue_no+3}

"""


meet_time_issue_code_str = """
# Issue no. #{issue_no+1}
## Scope and time scheduling of the meeting for {title} (issue #{issue_no} related)

The goal is to schedule the meeting in Teams calendar on 04.06.2024 at 19.45.

"""

meet_arrange_issue_code_str ="""
# Issue no. #{issue_no+2}
## Arrangement and execution of the meeting for {title} (issue #{issue_no} related)

The goal is to arrange and execute the meeting for {title}. The following things should be prepared:

- [ ] scope and schedule of meeting (in one week);

- [ ] conducting team (in two weeks);

- [ ] guide or instructions with examples (one week before meeting);

- [ ] announcement (in Slack and Teams channel) with basic information (conducting persons, date,scope,schedule) (one week before meeting);

- [ ] exemplary code in Jupyter (link) (one week before meeting).

"""


meet_guide_issue_code_str ="""
# Issue no. #{issue_no+3}
## Preparation or improvement of the guide for {title} (issue #{issue_no} related)

The goal is to prepare or improve a guide or report that is generated by the following code:

```
from {guide_class_module} import {guide_class_name}
{guide_class_name}();
```

"""

class MeetingIssueCreator:
    _title = 'implementation of ODESystem overview report'
    _issue_no = 567
    _guide = ODESystemOverviewReport
    
    def __init__(self,title=None,no=None,guide=None,*args,**kwargs):
        if title is not None: self._title = title
        if no is not None: self._issue_no = no
        if guide is not None: self._guide = guide
        
    
    def _get_elems_dict(self):

        elems_dict = {
                'title':self._title,
                'issue_no':self._issue_no,
                'issue_no+1':self._issue_no+1,
                'issue_no+2':self._issue_no+2,
                'issue_no+3':self._issue_no+3,
                'guide_class_module':guide_class.__module__,
                'guide_class_name':guide_class.__name__,
                }
        
        return elems_dict
        
    def get_issue_str(self):
        elems_dict = self._get_elems_dict()
        
        
        issue_code_str = meet_issue_code_str + meet_time_issue_code_str + meet_arrange_issue_code_str + meet_guide_issue_code_str
        return issue_code_str.format(**elems_dict)
    
    def _repr_markdown_(self):
        return self.get_issue_str()